// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: cortex-neuron-agent.proto

package neuron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NeuronAgent_RegisterHandler_FullMethodName   = "/cortex.neuron.NeuronAgent/RegisterHandler"
	NeuronAgent_UnregisterHandler_FullMethodName = "/cortex.neuron.NeuronAgent/UnregisterHandler"
	NeuronAgent_ListHandlers_FullMethodName      = "/cortex.neuron.NeuronAgent/ListHandlers"
	NeuronAgent_GetHandlerHistory_FullMethodName = "/cortex.neuron.NeuronAgent/GetHandlerHistory"
	NeuronAgent_Dispatch_FullMethodName          = "/cortex.neuron.NeuronAgent/Dispatch"
	NeuronAgent_ReportInvocation_FullMethodName  = "/cortex.neuron.NeuronAgent/ReportInvocation"
)

// NeuronAgentClient is the client API for NeuronAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeuronAgentClient interface {
	RegisterHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	UnregisterHandler(ctx context.Context, in *UnregisterHandlerRequest, opts ...grpc.CallOption) (*UnregisterHandlerResponse, error)
	ListHandlers(ctx context.Context, in *ListHandlersRequest, opts ...grpc.CallOption) (*ListHandlersResponse, error)
	GetHandlerHistory(ctx context.Context, in *GetHandlerHistoryRequest, opts ...grpc.CallOption) (*GetHandlerHistoryResponse, error)
	Dispatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DispatchRequest, DispatchMessage], error)
	ReportInvocation(ctx context.Context, in *ReportInvocationRequest, opts ...grpc.CallOption) (*ReportInvocationResponse, error)
}

type neuronAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewNeuronAgentClient(cc grpc.ClientConnInterface) NeuronAgentClient {
	return &neuronAgentClient{cc}
}

func (c *neuronAgentClient) RegisterHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, NeuronAgent_RegisterHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuronAgentClient) UnregisterHandler(ctx context.Context, in *UnregisterHandlerRequest, opts ...grpc.CallOption) (*UnregisterHandlerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterHandlerResponse)
	err := c.cc.Invoke(ctx, NeuronAgent_UnregisterHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuronAgentClient) ListHandlers(ctx context.Context, in *ListHandlersRequest, opts ...grpc.CallOption) (*ListHandlersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHandlersResponse)
	err := c.cc.Invoke(ctx, NeuronAgent_ListHandlers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuronAgentClient) GetHandlerHistory(ctx context.Context, in *GetHandlerHistoryRequest, opts ...grpc.CallOption) (*GetHandlerHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHandlerHistoryResponse)
	err := c.cc.Invoke(ctx, NeuronAgent_GetHandlerHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuronAgentClient) Dispatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DispatchRequest, DispatchMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NeuronAgent_ServiceDesc.Streams[0], NeuronAgent_Dispatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DispatchRequest, DispatchMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NeuronAgent_DispatchClient = grpc.BidiStreamingClient[DispatchRequest, DispatchMessage]

func (c *neuronAgentClient) ReportInvocation(ctx context.Context, in *ReportInvocationRequest, opts ...grpc.CallOption) (*ReportInvocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportInvocationResponse)
	err := c.cc.Invoke(ctx, NeuronAgent_ReportInvocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeuronAgentServer is the server API for NeuronAgent service.
// All implementations must embed UnimplementedNeuronAgentServer
// for forward compatibility.
type NeuronAgentServer interface {
	RegisterHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	UnregisterHandler(context.Context, *UnregisterHandlerRequest) (*UnregisterHandlerResponse, error)
	ListHandlers(context.Context, *ListHandlersRequest) (*ListHandlersResponse, error)
	GetHandlerHistory(context.Context, *GetHandlerHistoryRequest) (*GetHandlerHistoryResponse, error)
	Dispatch(grpc.BidiStreamingServer[DispatchRequest, DispatchMessage]) error
	ReportInvocation(context.Context, *ReportInvocationRequest) (*ReportInvocationResponse, error)
	mustEmbedUnimplementedNeuronAgentServer()
}

// UnimplementedNeuronAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNeuronAgentServer struct{}

func (UnimplementedNeuronAgentServer) RegisterHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHandler not implemented")
}
func (UnimplementedNeuronAgentServer) UnregisterHandler(context.Context, *UnregisterHandlerRequest) (*UnregisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterHandler not implemented")
}
func (UnimplementedNeuronAgentServer) ListHandlers(context.Context, *ListHandlersRequest) (*ListHandlersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHandlers not implemented")
}
func (UnimplementedNeuronAgentServer) GetHandlerHistory(context.Context, *GetHandlerHistoryRequest) (*GetHandlerHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHandlerHistory not implemented")
}
func (UnimplementedNeuronAgentServer) Dispatch(grpc.BidiStreamingServer[DispatchRequest, DispatchMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedNeuronAgentServer) ReportInvocation(context.Context, *ReportInvocationRequest) (*ReportInvocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportInvocation not implemented")
}
func (UnimplementedNeuronAgentServer) mustEmbedUnimplementedNeuronAgentServer() {}
func (UnimplementedNeuronAgentServer) testEmbeddedByValue()                     {}

// UnsafeNeuronAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeuronAgentServer will
// result in compilation errors.
type UnsafeNeuronAgentServer interface {
	mustEmbedUnimplementedNeuronAgentServer()
}

func RegisterNeuronAgentServer(s grpc.ServiceRegistrar, srv NeuronAgentServer) {
	// If the following call pancis, it indicates UnimplementedNeuronAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NeuronAgent_ServiceDesc, srv)
}

func _NeuronAgent_RegisterHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuronAgentServer).RegisterHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuronAgent_RegisterHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuronAgentServer).RegisterHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuronAgent_UnregisterHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuronAgentServer).UnregisterHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuronAgent_UnregisterHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuronAgentServer).UnregisterHandler(ctx, req.(*UnregisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuronAgent_ListHandlers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHandlersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuronAgentServer).ListHandlers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuronAgent_ListHandlers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuronAgentServer).ListHandlers(ctx, req.(*ListHandlersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuronAgent_GetHandlerHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHandlerHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuronAgentServer).GetHandlerHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuronAgent_GetHandlerHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuronAgentServer).GetHandlerHistory(ctx, req.(*GetHandlerHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuronAgent_Dispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NeuronAgentServer).Dispatch(&grpc.GenericServerStream[DispatchRequest, DispatchMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NeuronAgent_DispatchServer = grpc.BidiStreamingServer[DispatchRequest, DispatchMessage]

func _NeuronAgent_ReportInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuronAgentServer).ReportInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuronAgent_ReportInvocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuronAgentServer).ReportInvocation(ctx, req.(*ReportInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NeuronAgent_ServiceDesc is the grpc.ServiceDesc for NeuronAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeuronAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cortex.neuron.NeuronAgent",
	HandlerType: (*NeuronAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterHandler",
			Handler:    _NeuronAgent_RegisterHandler_Handler,
		},
		{
			MethodName: "UnregisterHandler",
			Handler:    _NeuronAgent_UnregisterHandler_Handler,
		},
		{
			MethodName: "ListHandlers",
			Handler:    _NeuronAgent_ListHandlers_Handler,
		},
		{
			MethodName: "GetHandlerHistory",
			Handler:    _NeuronAgent_GetHandlerHistory_Handler,
		},
		{
			MethodName: "ReportInvocation",
			Handler:    _NeuronAgent_ReportInvocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dispatch",
			Handler:       _NeuronAgent_Dispatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cortex-neuron-agent.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: cortex-axon-agent.proto

package axon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AxonAgent_RegisterHandler_FullMethodName   = "/cortex.axon.AxonAgent/RegisterHandler"
	AxonAgent_UnregisterHandler_FullMethodName = "/cortex.axon.AxonAgent/UnregisterHandler"
	AxonAgent_ListHandlers_FullMethodName      = "/cortex.axon.AxonAgent/ListHandlers"
	AxonAgent_GetHandlerHistory_FullMethodName = "/cortex.axon.AxonAgent/GetHandlerHistory"
	AxonAgent_Dispatch_FullMethodName          = "/cortex.axon.AxonAgent/Dispatch"
	AxonAgent_ReportInvocation_FullMethodName  = "/cortex.axon.AxonAgent/ReportInvocation"
)

// AxonAgentClient is the client API for AxonAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AxonAgentClient interface {
	RegisterHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	UnregisterHandler(ctx context.Context, in *UnregisterHandlerRequest, opts ...grpc.CallOption) (*UnregisterHandlerResponse, error)
	ListHandlers(ctx context.Context, in *ListHandlersRequest, opts ...grpc.CallOption) (*ListHandlersResponse, error)
	GetHandlerHistory(ctx context.Context, in *GetHandlerHistoryRequest, opts ...grpc.CallOption) (*GetHandlerHistoryResponse, error)
	Dispatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DispatchRequest, DispatchMessage], error)
	ReportInvocation(ctx context.Context, in *ReportInvocationRequest, opts ...grpc.CallOption) (*ReportInvocationResponse, error)
}

type axonAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewAxonAgentClient(cc grpc.ClientConnInterface) AxonAgentClient {
	return &axonAgentClient{cc}
}

func (c *axonAgentClient) RegisterHandler(ctx context.Context, in *RegisterHandlerRequest, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, AxonAgent_RegisterHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *axonAgentClient) UnregisterHandler(ctx context.Context, in *UnregisterHandlerRequest, opts ...grpc.CallOption) (*UnregisterHandlerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterHandlerResponse)
	err := c.cc.Invoke(ctx, AxonAgent_UnregisterHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *axonAgentClient) ListHandlers(ctx context.Context, in *ListHandlersRequest, opts ...grpc.CallOption) (*ListHandlersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHandlersResponse)
	err := c.cc.Invoke(ctx, AxonAgent_ListHandlers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *axonAgentClient) GetHandlerHistory(ctx context.Context, in *GetHandlerHistoryRequest, opts ...grpc.CallOption) (*GetHandlerHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHandlerHistoryResponse)
	err := c.cc.Invoke(ctx, AxonAgent_GetHandlerHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *axonAgentClient) Dispatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DispatchRequest, DispatchMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AxonAgent_ServiceDesc.Streams[0], AxonAgent_Dispatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DispatchRequest, DispatchMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AxonAgent_DispatchClient = grpc.BidiStreamingClient[DispatchRequest, DispatchMessage]

func (c *axonAgentClient) ReportInvocation(ctx context.Context, in *ReportInvocationRequest, opts ...grpc.CallOption) (*ReportInvocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportInvocationResponse)
	err := c.cc.Invoke(ctx, AxonAgent_ReportInvocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AxonAgentServer is the server API for AxonAgent service.
// All implementations must embed UnimplementedAxonAgentServer
// for forward compatibility.
type AxonAgentServer interface {
	RegisterHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error)
	UnregisterHandler(context.Context, *UnregisterHandlerRequest) (*UnregisterHandlerResponse, error)
	ListHandlers(context.Context, *ListHandlersRequest) (*ListHandlersResponse, error)
	GetHandlerHistory(context.Context, *GetHandlerHistoryRequest) (*GetHandlerHistoryResponse, error)
	Dispatch(grpc.BidiStreamingServer[DispatchRequest, DispatchMessage]) error
	ReportInvocation(context.Context, *ReportInvocationRequest) (*ReportInvocationResponse, error)
	mustEmbedUnimplementedAxonAgentServer()
}

// UnimplementedAxonAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAxonAgentServer struct{}

func (UnimplementedAxonAgentServer) RegisterHandler(context.Context, *RegisterHandlerRequest) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHandler not implemented")
}
func (UnimplementedAxonAgentServer) UnregisterHandler(context.Context, *UnregisterHandlerRequest) (*UnregisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterHandler not implemented")
}
func (UnimplementedAxonAgentServer) ListHandlers(context.Context, *ListHandlersRequest) (*ListHandlersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHandlers not implemented")
}
func (UnimplementedAxonAgentServer) GetHandlerHistory(context.Context, *GetHandlerHistoryRequest) (*GetHandlerHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHandlerHistory not implemented")
}
func (UnimplementedAxonAgentServer) Dispatch(grpc.BidiStreamingServer[DispatchRequest, DispatchMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedAxonAgentServer) ReportInvocation(context.Context, *ReportInvocationRequest) (*ReportInvocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportInvocation not implemented")
}
func (UnimplementedAxonAgentServer) mustEmbedUnimplementedAxonAgentServer() {}
func (UnimplementedAxonAgentServer) testEmbeddedByValue()                   {}

// UnsafeAxonAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AxonAgentServer will
// result in compilation errors.
type UnsafeAxonAgentServer interface {
	mustEmbedUnimplementedAxonAgentServer()
}

func RegisterAxonAgentServer(s grpc.ServiceRegistrar, srv AxonAgentServer) {
	// If the following call pancis, it indicates UnimplementedAxonAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AxonAgent_ServiceDesc, srv)
}

func _AxonAgent_RegisterHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AxonAgentServer).RegisterHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AxonAgent_RegisterHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AxonAgentServer).RegisterHandler(ctx, req.(*RegisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AxonAgent_UnregisterHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AxonAgentServer).UnregisterHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AxonAgent_UnregisterHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AxonAgentServer).UnregisterHandler(ctx, req.(*UnregisterHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AxonAgent_ListHandlers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHandlersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AxonAgentServer).ListHandlers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AxonAgent_ListHandlers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AxonAgentServer).ListHandlers(ctx, req.(*ListHandlersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AxonAgent_GetHandlerHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHandlerHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AxonAgentServer).GetHandlerHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AxonAgent_GetHandlerHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AxonAgentServer).GetHandlerHistory(ctx, req.(*GetHandlerHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AxonAgent_Dispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AxonAgentServer).Dispatch(&grpc.GenericServerStream[DispatchRequest, DispatchMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AxonAgent_DispatchServer = grpc.BidiStreamingServer[DispatchRequest, DispatchMessage]

func _AxonAgent_ReportInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AxonAgentServer).ReportInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AxonAgent_ReportInvocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AxonAgentServer).ReportInvocation(ctx, req.(*ReportInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AxonAgent_ServiceDesc is the grpc.ServiceDesc for AxonAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AxonAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cortex.axon.AxonAgent",
	HandlerType: (*AxonAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterHandler",
			Handler:    _AxonAgent_RegisterHandler_Handler,
		},
		{
			MethodName: "UnregisterHandler",
			Handler:    _AxonAgent_UnregisterHandler_Handler,
		},
		{
			MethodName: "ListHandlers",
			Handler:    _AxonAgent_ListHandlers_Handler,
		},
		{
			MethodName: "GetHandlerHistory",
			Handler:    _AxonAgent_GetHandlerHistory_Handler,
		},
		{
			MethodName: "ReportInvocation",
			Handler:    _AxonAgent_ReportInvocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dispatch",
			Handler:       _AxonAgent_Dispatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cortex-axon-agent.proto",
}

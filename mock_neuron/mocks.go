// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cortexapps/neuron-go/.generated/proto/github.com/cortexapps/neuron (interfaces: CortexApiClient,NeuronAgentClient)
//
// Generated by this command:
//
//	mockgen github.com/cortexapps/neuron-go/.generated/proto/github.com/cortexapps/neuron CortexApiClient,NeuronAgentClient
//

// Package mock_neuron is a generated GoMock package.
package mock_neuron

import (
	context "context"
	reflect "reflect"

	neuron "github.com/cortexapps/neuron-go/.generated/proto/github.com/cortexapps/neuron"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCortexApiClient is a mock of CortexApiClient interface.
type MockCortexApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockCortexApiClientMockRecorder
	isgomock struct{}
}

// MockCortexApiClientMockRecorder is the mock recorder for MockCortexApiClient.
type MockCortexApiClientMockRecorder struct {
	mock *MockCortexApiClient
}

// NewMockCortexApiClient creates a new mock instance.
func NewMockCortexApiClient(ctrl *gomock.Controller) *MockCortexApiClient {
	mock := &MockCortexApiClient{ctrl: ctrl}
	mock.recorder = &MockCortexApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCortexApiClient) EXPECT() *MockCortexApiClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCortexApiClient) Call(ctx context.Context, in *neuron.CallRequest, opts ...grpc.CallOption) (*neuron.CallResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*neuron.CallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockCortexApiClientMockRecorder) Call(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCortexApiClient)(nil).Call), varargs...)
}

// MockNeuronAgentClient is a mock of NeuronAgentClient interface.
type MockNeuronAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockNeuronAgentClientMockRecorder
	isgomock struct{}
}

// MockNeuronAgentClientMockRecorder is the mock recorder for MockNeuronAgentClient.
type MockNeuronAgentClientMockRecorder struct {
	mock *MockNeuronAgentClient
}

// NewMockNeuronAgentClient creates a new mock instance.
func NewMockNeuronAgentClient(ctrl *gomock.Controller) *MockNeuronAgentClient {
	mock := &MockNeuronAgentClient{ctrl: ctrl}
	mock.recorder = &MockNeuronAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNeuronAgentClient) EXPECT() *MockNeuronAgentClientMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockNeuronAgentClient) Dispatch(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[neuron.DispatchRequest, neuron.DispatchMessage], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dispatch", varargs...)
	ret0, _ := ret[0].(grpc.BidiStreamingClient[neuron.DispatchRequest, neuron.DispatchMessage])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockNeuronAgentClientMockRecorder) Dispatch(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockNeuronAgentClient)(nil).Dispatch), varargs...)
}

// GetHandlerHistory mocks base method.
func (m *MockNeuronAgentClient) GetHandlerHistory(ctx context.Context, in *neuron.GetHandlerHistoryRequest, opts ...grpc.CallOption) (*neuron.GetHandlerHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHandlerHistory", varargs...)
	ret0, _ := ret[0].(*neuron.GetHandlerHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHandlerHistory indicates an expected call of GetHandlerHistory.
func (mr *MockNeuronAgentClientMockRecorder) GetHandlerHistory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandlerHistory", reflect.TypeOf((*MockNeuronAgentClient)(nil).GetHandlerHistory), varargs...)
}

// ListHandlers mocks base method.
func (m *MockNeuronAgentClient) ListHandlers(ctx context.Context, in *neuron.ListHandlersRequest, opts ...grpc.CallOption) (*neuron.ListHandlersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHandlers", varargs...)
	ret0, _ := ret[0].(*neuron.ListHandlersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHandlers indicates an expected call of ListHandlers.
func (mr *MockNeuronAgentClientMockRecorder) ListHandlers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHandlers", reflect.TypeOf((*MockNeuronAgentClient)(nil).ListHandlers), varargs...)
}

// RegisterHandler mocks base method.
func (m *MockNeuronAgentClient) RegisterHandler(ctx context.Context, in *neuron.RegisterHandlerRequest, opts ...grpc.CallOption) (*neuron.RegisterHandlerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterHandler", varargs...)
	ret0, _ := ret[0].(*neuron.RegisterHandlerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockNeuronAgentClientMockRecorder) RegisterHandler(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockNeuronAgentClient)(nil).RegisterHandler), varargs...)
}

// ReportInvocation mocks base method.
func (m *MockNeuronAgentClient) ReportInvocation(ctx context.Context, in *neuron.ReportInvocationRequest, opts ...grpc.CallOption) (*neuron.ReportInvocationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportInvocation", varargs...)
	ret0, _ := ret[0].(*neuron.ReportInvocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportInvocation indicates an expected call of ReportInvocation.
func (mr *MockNeuronAgentClientMockRecorder) ReportInvocation(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportInvocation", reflect.TypeOf((*MockNeuronAgentClient)(nil).ReportInvocation), varargs...)
}

// UnregisterHandler mocks base method.
func (m *MockNeuronAgentClient) UnregisterHandler(ctx context.Context, in *neuron.UnregisterHandlerRequest, opts ...grpc.CallOption) (*neuron.UnregisterHandlerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterHandler", varargs...)
	ret0, _ := ret[0].(*neuron.UnregisterHandlerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterHandler indicates an expected call of UnregisterHandler.
func (mr *MockNeuronAgentClientMockRecorder) UnregisterHandler(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterHandler", reflect.TypeOf((*MockNeuronAgentClient)(nil).UnregisterHandler), varargs...)
}
